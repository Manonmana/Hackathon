{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c74d4e65",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2022-11-05T17:45:07.177192Z",
     "iopub.status.busy": "2022-11-05T17:45:07.176727Z",
     "iopub.status.idle": "2022-11-05T17:45:07.193489Z",
     "shell.execute_reply": "2022-11-05T17:45:07.192665Z"
    },
    "papermill": {
     "duration": 0.028797,
     "end_time": "2022-11-05T17:45:07.196796",
     "exception": false,
     "start_time": "2022-11-05T17:45:07.167999",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/task-1/spark-5-percent-dataset.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c2f41ad3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:45:07.210530Z",
     "iopub.status.busy": "2022-11-05T17:45:07.209795Z",
     "iopub.status.idle": "2022-11-05T17:45:54.194517Z",
     "shell.execute_reply": "2022-11-05T17:45:54.193179Z"
    },
    "papermill": {
     "duration": 46.994227,
     "end_time": "2022-11-05T17:45:54.197347",
     "exception": false,
     "start_time": "2022-11-05T17:45:07.203120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting pyspark\r\n",
      "  Downloading pyspark-3.3.1.tar.gz (281.4 MB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m281.4/281.4 MB\u001b[0m \u001b[31m4.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l-\b \bdone\r\n",
      "\u001b[?25hCollecting py4j==0.10.9.5\r\n",
      "  Downloading py4j-0.10.9.5-py2.py3-none-any.whl (199 kB)\r\n",
      "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.7/199.7 kB\u001b[0m \u001b[31m15.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\r\n",
      "\u001b[?25hBuilding wheels for collected packages: pyspark\r\n",
      "  Building wheel for pyspark (setup.py) ... \u001b[?25l-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \b/\b \b-\b \b\\\b \b|\b \bdone\r\n",
      "\u001b[?25h  Created wheel for pyspark: filename=pyspark-3.3.1-py2.py3-none-any.whl size=281845513 sha256=8bf0b1d54dd9d40dffa830c3848f33e9d28effd589fa08e349b28a79cc75a599\r\n",
      "  Stored in directory: /root/.cache/pip/wheels/42/59/f5/79a5bf931714dcd201b26025347785f087370a10a3329a899c\r\n",
      "Successfully built pyspark\r\n",
      "Installing collected packages: py4j, pyspark\r\n",
      "  Attempting uninstall: py4j\r\n",
      "    Found existing installation: py4j 0.10.9.7\r\n",
      "    Uninstalling py4j-0.10.9.7:\r\n",
      "      Successfully uninstalled py4j-0.10.9.7\r\n",
      "Successfully installed py4j-0.10.9.5 pyspark-3.3.1\r\n",
      "\u001b[33mWARNING: Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv\u001b[0m\u001b[33m\r\n",
      "\u001b[0m"
     ]
    }
   ],
   "source": [
    "!pip install pyspark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ac748e23",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:45:54.235680Z",
     "iopub.status.busy": "2022-11-05T17:45:54.234247Z",
     "iopub.status.idle": "2022-11-05T17:45:54.300928Z",
     "shell.execute_reply": "2022-11-05T17:45:54.299791Z"
    },
    "papermill": {
     "duration": 0.088042,
     "end_time": "2022-11-05T17:45:54.303902",
     "exception": false,
     "start_time": "2022-11-05T17:45:54.215860",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import pyspark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2974bf0a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:45:54.335325Z",
     "iopub.status.busy": "2022-11-05T17:45:54.334628Z",
     "iopub.status.idle": "2022-11-05T17:45:54.341095Z",
     "shell.execute_reply": "2022-11-05T17:45:54.339902Z"
    },
    "papermill": {
     "duration": 0.024533,
     "end_time": "2022-11-05T17:45:54.343296",
     "exception": false,
     "start_time": "2022-11-05T17:45:54.318763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "from pyspark.sql import SparkSession\n",
    "from pyspark import SparkConf, SparkContext\n",
    "from pyspark.sql import SparkSession, SQLContext\n",
    "\n",
    "from pyspark.sql.types import *\n",
    "import pyspark.sql.functions as F\n",
    "from pyspark.sql.functions import udf, col"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ffb737e3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:45:54.374955Z",
     "iopub.status.busy": "2022-11-05T17:45:54.374290Z",
     "iopub.status.idle": "2022-11-05T17:45:59.713838Z",
     "shell.execute_reply": "2022-11-05T17:45:59.712705Z"
    },
    "papermill": {
     "duration": 5.358253,
     "end_time": "2022-11-05T17:45:59.717016",
     "exception": false,
     "start_time": "2022-11-05T17:45:54.358763",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Setting default log level to \"WARN\".\n",
      "To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22/11/05 17:45:57 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\n"
     ]
    }
   ],
   "source": [
    "spark = SparkSession.builder.master(\"local[2]\").appName(\"Task-1\").getOrCreate()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "346d3c31",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:45:59.748279Z",
     "iopub.status.busy": "2022-11-05T17:45:59.747846Z",
     "iopub.status.idle": "2022-11-05T17:46:00.735176Z",
     "shell.execute_reply": "2022-11-05T17:46:00.734273Z"
    },
    "papermill": {
     "duration": 1.006867,
     "end_time": "2022-11-05T17:46:00.738568",
     "exception": false,
     "start_time": "2022-11-05T17:45:59.731701",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "            <div>\n",
       "                <p><b>SparkSession - in-memory</b></p>\n",
       "                \n",
       "        <div>\n",
       "            <p><b>SparkContext</b></p>\n",
       "\n",
       "            <p><a href=\"http://6333afea4665:4040\">Spark UI</a></p>\n",
       "\n",
       "            <dl>\n",
       "              <dt>Version</dt>\n",
       "                <dd><code>v3.3.1</code></dd>\n",
       "              <dt>Master</dt>\n",
       "                <dd><code>local[2]</code></dd>\n",
       "              <dt>AppName</dt>\n",
       "                <dd><code>Task-1</code></dd>\n",
       "            </dl>\n",
       "        </div>\n",
       "        \n",
       "            </div>\n",
       "        "
      ],
      "text/plain": [
       "<pyspark.sql.session.SparkSession at 0x7f4357114650>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "29c59186",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:00.778111Z",
     "iopub.status.busy": "2022-11-05T17:46:00.777706Z",
     "iopub.status.idle": "2022-11-05T17:46:00.784998Z",
     "shell.execute_reply": "2022-11-05T17:46:00.784185Z"
    },
    "papermill": {
     "duration": 0.026918,
     "end_time": "2022-11-05T17:46:00.787610",
     "exception": false,
     "start_time": "2022-11-05T17:46:00.760692",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <div>\n",
       "            <p><b>SparkContext</b></p>\n",
       "\n",
       "            <p><a href=\"http://6333afea4665:4040\">Spark UI</a></p>\n",
       "\n",
       "            <dl>\n",
       "              <dt>Version</dt>\n",
       "                <dd><code>v3.3.1</code></dd>\n",
       "              <dt>Master</dt>\n",
       "                <dd><code>local[2]</code></dd>\n",
       "              <dt>AppName</dt>\n",
       "                <dd><code>Task-1</code></dd>\n",
       "            </dl>\n",
       "        </div>\n",
       "        "
      ],
      "text/plain": [
       "<SparkContext master=local[2] appName=Task-1>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sc = spark.sparkContext\n",
    "sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f3bf1d95",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:00.823948Z",
     "iopub.status.busy": "2022-11-05T17:46:00.823524Z",
     "iopub.status.idle": "2022-11-05T17:46:00.846368Z",
     "shell.execute_reply": "2022-11-05T17:46:00.844880Z"
    },
    "papermill": {
     "duration": 0.041504,
     "end_time": "2022-11-05T17:46:00.848997",
     "exception": false,
     "start_time": "2022-11-05T17:46:00.807493",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/pyspark/sql/context.py:114: FutureWarning: Deprecated in 3.0.0. Use SparkSession.builder.getOrCreate() instead.\n",
      "  FutureWarning,\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<pyspark.sql.context.SQLContext at 0x7f4368f17ed0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sqlContext = SQLContext(spark.sparkContext)\n",
    "sqlContext"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "a547f5b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:00.881015Z",
     "iopub.status.busy": "2022-11-05T17:46:00.880604Z",
     "iopub.status.idle": "2022-11-05T17:46:05.890867Z",
     "shell.execute_reply": "2022-11-05T17:46:05.889948Z"
    },
    "papermill": {
     "duration": 5.030205,
     "end_time": "2022-11-05T17:46:05.894265",
     "exception": false,
     "start_time": "2022-11-05T17:46:00.864060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df=spark.read.csv(\"../input/task-1\",header=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c0c91cac",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:05.944724Z",
     "iopub.status.busy": "2022-11-05T17:46:05.944310Z",
     "iopub.status.idle": "2022-11-05T17:46:06.280912Z",
     "shell.execute_reply": "2022-11-05T17:46:06.279781Z"
    },
    "papermill": {
     "duration": 0.365379,
     "end_time": "2022-11-05T17:46:06.284291",
     "exception": false,
     "start_time": "2022-11-05T17:46:05.918912",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+-------------+--------------------+-----+--------------------+--------------+-----------+\n",
      "|RP State Plate|Ticket number|          Issue Date|Color|            Location|Violation code|Fine amount|\n",
      "+--------------+-------------+--------------------+-----+--------------------+--------------+-----------+\n",
      "|            CA|   1108319494|2015-12-22T00:00:...|   WH|    12355 BURBANK BL|         5200A|       25.0|\n",
      "|            CA|   1110265251|2015-12-16T00:00:...|   WH|ORION AVE/SHERMAN WY|         5204A|       25.0|\n",
      "|            CA|   1111967194|2015-12-22T00:00:...|   YE|   700 WORLD WAY L/L|           007|       68.0|\n",
      "|            CA|   1111967205|2015-12-28T00:00:...|   WH|   500 WORLD WAY U/L|          8939|       58.0|\n",
      "|            CA|   1112069534|2015-12-23T00:00:...|   WH|       700 WORLD WAY|          8939|       58.0|\n",
      "|            CA|   1112094410|2015-12-15T00:00:...|   GY|   9019 S AIRPORT BL|         80714|       68.0|\n",
      "|            CA|   1112096263|2015-12-26T00:00:...|   SI|    101 WORLD WAY 2B|        4000A1|       50.0|\n",
      "|            CA|   1112716640|2015-12-28T00:00:...|   RE|     2210 W COURT ST|        8069BS|       73.0|\n",
      "|            CA|   1112716651|2015-12-28T00:00:...|   WH|  W/S 100 N ROSELAKE|        8069BS|       73.0|\n",
      "|            OR|   1112717491|2015-12-28T00:00:...|   RE|   1837 N WHITLEY AV|        8069BS|       73.0|\n",
      "|            CA|   1112718073|2015-12-28T00:00:...|   BK|  A/F 4454 W AVOCADO|           098|       25.0|\n",
      "|            CA|   1113011513|2015-12-12T00:00:...|   GR|       50TH W/O MAIN|        4000A1|       50.0|\n",
      "|            CA|   1113011841|2015-12-11T00:00:...|   SI|             62/WALL|        4000A1|       50.0|\n",
      "|            CA|   1113879793|2015-12-24T00:00:...|   BK|     2370 S WESTWOOD|        8069AP|       93.0|\n",
      "|            ND|   1113964773|2015-12-24T00:00:...|   MA|    3760 WATSEKA AVE|        8069BS|       73.0|\n",
      "|            CA|   1113964806|2015-12-24T00:00:...|   GY|   9837 TABOR STREET|        8069BS|       73.0|\n",
      "|            CA|   1113964832|2015-12-24T00:00:...|   WH|       3614 FARIS DR|        8069BS|       73.0|\n",
      "|            CA|   1113965123|2015-12-24T00:00:...|   MA| 3233 SEPULVEDA BLVD|        8069BS|       73.0|\n",
      "|            CA|   1113965274|2015-12-24T00:00:...| null|    3447 VETERAN AVE|        8069BS|       73.0|\n",
      "|            CA|   1113965355|2015-12-27T00:00:...|   WH|  9165 ALCOTT STREET|         8058L|       68.0|\n",
      "+--------------+-------------+--------------------+-----+--------------------+--------------+-----------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    }
   ],
   "source": [
    "df.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dee54686",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T16:34:07.697168Z",
     "iopub.status.busy": "2022-11-05T16:34:07.696696Z",
     "iopub.status.idle": "2022-11-05T16:34:07.718366Z",
     "shell.execute_reply": "2022-11-05T16:34:07.716978Z",
     "shell.execute_reply.started": "2022-11-05T16:34:07.697128Z"
    },
    "papermill": {
     "duration": 0.021447,
     "end_time": "2022-11-05T17:46:06.327815",
     "exception": false,
     "start_time": "2022-11-05T17:46:06.306368",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "df2=df.withColumnRenamed(\"Fine Amount\",\"Fine\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "88e6e79c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:06.373101Z",
     "iopub.status.busy": "2022-11-05T17:46:06.372707Z",
     "iopub.status.idle": "2022-11-05T17:46:06.390261Z",
     "shell.execute_reply": "2022-11-05T17:46:06.389086Z"
    },
    "papermill": {
     "duration": 0.043704,
     "end_time": "2022-11-05T17:46:06.393648",
     "exception": false,
     "start_time": "2022-11-05T17:46:06.349944",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df2=df.withColumnRenamed(\"Fine Amount\",\"Fine\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "5f1dae4a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:06.436135Z",
     "iopub.status.busy": "2022-11-05T17:46:06.435192Z",
     "iopub.status.idle": "2022-11-05T17:46:06.465438Z",
     "shell.execute_reply": "2022-11-05T17:46:06.464431Z"
    },
    "papermill": {
     "duration": 0.051509,
     "end_time": "2022-11-05T17:46:06.468574",
     "exception": false,
     "start_time": "2022-11-05T17:46:06.417065",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df3 = df2.withColumn(\"Fine\", df2[\"Fine\"].cast(\"double\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "525670f9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:06.500858Z",
     "iopub.status.busy": "2022-11-05T17:46:06.500455Z",
     "iopub.status.idle": "2022-11-05T17:46:06.538111Z",
     "shell.execute_reply": "2022-11-05T17:46:06.536980Z"
    },
    "papermill": {
     "duration": 0.056684,
     "end_time": "2022-11-05T17:46:06.540797",
     "exception": false,
     "start_time": "2022-11-05T17:46:06.484113",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('RP State Plate', 'string'),\n",
       " ('Ticket number', 'string'),\n",
       " ('Issue Date', 'string'),\n",
       " ('Color', 'string'),\n",
       " ('Location', 'string'),\n",
       " ('Violation code', 'string'),\n",
       " ('Fine', 'double')]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "a0278e34",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:06.573088Z",
     "iopub.status.busy": "2022-11-05T17:46:06.572331Z",
     "iopub.status.idle": "2022-11-05T17:46:06.631171Z",
     "shell.execute_reply": "2022-11-05T17:46:06.630183Z"
    },
    "papermill": {
     "duration": 0.078097,
     "end_time": "2022-11-05T17:46:06.633911",
     "exception": false,
     "start_time": "2022-11-05T17:46:06.555814",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df4=df3.groupBy('RP State Plate').avg('Fine')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "2dffa8fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T17:46:06.665971Z",
     "iopub.status.busy": "2022-11-05T17:46:06.665549Z",
     "iopub.status.idle": "2022-11-05T17:46:09.199528Z",
     "shell.execute_reply": "2022-11-05T17:46:09.198395Z"
    },
    "papermill": {
     "duration": 2.553881,
     "end_time": "2022-11-05T17:46:09.203073",
     "exception": false,
     "start_time": "2022-11-05T17:46:06.649192",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Stage 2:=============================>                             (1 + 1) / 2]\r"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------+-----------------+\n",
      "|RP State Plate|        avg(Fine)|\n",
      "+--------------+-----------------+\n",
      "|            SC|73.14909090909092|\n",
      "|            AZ|76.12789892696435|\n",
      "|            NS|           71.125|\n",
      "|            LA|74.13555555555556|\n",
      "|            MN|          73.1632|\n",
      "|            NJ|72.62927981109799|\n",
      "|            MX|70.70103092783505|\n",
      "|            DC|70.34126984126983|\n",
      "|            CN|             74.0|\n",
      "|            OR|74.42333709131906|\n",
      "|            NW|             73.0|\n",
      "|            VA|72.60915492957747|\n",
      "|            CZ|             70.5|\n",
      "|          null|71.47619047619048|\n",
      "|            RI|             72.7|\n",
      "|            WY|73.07446808510639|\n",
      "|            KY|74.14761904761905|\n",
      "|            BC|71.38709677419355|\n",
      "|            NH|73.12396694214875|\n",
      "|            MI|74.17245119305856|\n",
      "+--------------+-----------------+\n",
      "only showing top 20 rows\n",
      "\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "                                                                                \r"
     ]
    }
   ],
   "source": [
    "df4.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca2c3f2a",
   "metadata": {
    "papermill": {
     "duration": 0.01517,
     "end_time": "2022-11-05T17:46:09.236710",
     "exception": false,
     "start_time": "2022-11-05T17:46:09.221540",
     "status": "completed"
    },
    "tags": []
   },
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd59bcad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-11-05T16:17:24.986158Z",
     "iopub.status.busy": "2022-11-05T16:17:24.985722Z",
     "iopub.status.idle": "2022-11-05T16:17:25.004557Z",
     "shell.execute_reply": "2022-11-05T16:17:25.003332Z",
     "shell.execute_reply.started": "2022-11-05T16:17:24.986123Z"
    },
    "papermill": {
     "duration": 0.015174,
     "end_time": "2022-11-05T17:46:09.267396",
     "exception": false,
     "start_time": "2022-11-05T17:46:09.252222",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 72.979887,
   "end_time": "2022-11-05T17:46:11.905125",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2022-11-05T17:44:58.925238",
   "version": "2.3.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
